Unsolved exercises:

3. Look at the palindrome examples (§18.7); redo the Jack-and-Jill example from §20.1.2 using that variety of techniques.

----------------------------------------------------------------------------------------------------

6. Write a find-and-replace operation for Documents based on §20.6.2.

Exercise 6 notes:

 - have to think this one through a bit more; if I were to replace a string with a smaller string, I'd    have to move all the elements from the right to the left by a certain offset and then remove the       unused memory...

----------------------------------------------------------------------------------------------------

10. Define a version of the word-counting program where the user can specify the set of whitespace characters.

----------------------------------------------------------------------------------------------------

12. Complete the definition of list from §20.4.1–2 and get the high() example to run. Allocate a Link to represent one past the end.

Exercise 12 notes:

 - Have a bug here

----------------------------------------------------------------------------------------------------

13. We don’t really need a “real” one-past-the-end Link for a list. Modify your solution to the previous exercise to use 0 to represent a pointer to the (nonexistent) one-past-the-end Link (list<Elem>::end()); that way, the size of an empty list can be equal to the size of a single pointer.

----------------------------------------------------------------------------------------------------

15. Define a pvector to be like a vector of pointers except that it contains pointers to objects and its destructor deletes each object.

----------------------------------------------------------------------------------------------------

16. Define an ovector that is like pvector except that the [ ] and * operators return a reference to the object pointed to by an element rather than the pointer.

----------------------------------------------------------------------------------------------------

17. Define an ownership_vector that hold pointers to objects like pvector but provides a mechanism for the user to decide which objects are owned by the vector (i.e., which objects are deleted by the destructor). Hint: This exercise is simple if you were awake for Chapter 13.

----------------------------------------------------------------------------------------------------

18. Define a range-checked iterator for vector (a random-access iterator).

----------------------------------------------------------------------------------------------------

19. Define a range-checked iterator for list (a bidirectional iterator).